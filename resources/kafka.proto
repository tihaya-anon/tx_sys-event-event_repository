syntax = "proto3";

package kafka;

message Query {
  repeated Filter filters = 1;
  repeated string select_fields = 2;  // optional: projection
  repeated OrderBy order_by = 3;
  int32 limit = 4;
  string page_token = 5;  // for pagination
  message Filter {
    enum Operator {
      OP_UNSPECIFIED = 0;
      EQ = 1;
      NEQ = 2;
      LT = 3;
      LTE = 4;
      GT = 5;
      GTE = 6;
      IN = 7;
      LIKE = 8;  // optional if supporting full-text
    }

    string field =
        1;  // e.g., "status", "topic", "created_at", "metadata.source"
    Operator op = 2;
    repeated string values = 3;  // For IN or single-element match
  }
  message OrderBy {
    string field = 1;
    bool descending = 2;
  }
}
message Result {  // read events result
  repeated Event events = 1;
  string next_page_token = 2;
  int64 total_size = 3;
}
message Event {
  enum DeliveryStatus {
    DELIVERY_STATUS_UNSPECIFIED = 0;
    PENDING = 1;
    RETRYING = 2;
    DELIVERED = 3;
    DEAD = 4;
  }
  string event_id = 1;
  string event_topic = 2;
  string event_type = 3;
  string source = 4;
  int64 created_at = 5;
  int64 expires_at = 6;
  DeliveryStatus status = 7;
  int32 retry_count = 8;
  string dedup_key = 9;
  map<string, string> metadata = 10;
  bytes payload = 11;
  string target_service = 12;  // Filled by router or producer
  string correlation_id = 13;  // For tracing
}