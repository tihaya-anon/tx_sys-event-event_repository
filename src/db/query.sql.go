// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createEvent = `-- name: CreateEvent :exec
INSERT INTO events (
  event_id,
  event_topic,
  event_type,
  source,
  created_at,
  expires_at,
  status,
  retry_count,
  dedup_key,
  metadata,
  payload,
  target_service,
  correlation_id
) VALUES (
  $1, $2, $3, $4, 
  $5, $6, $7, $8, 
  $9, $10, $11, $12, $13
)
`

type CreateEventParams struct {
	EventID       string
	EventTopic    string
	EventType     string
	Source        string
	CreatedAt     int64
	ExpiresAt     pgtype.Int8
	Status        DeliveryStatus
	RetryCount    pgtype.Int4
	DedupKey      pgtype.Text
	Metadata      []byte
	Payload       []byte
	TargetService pgtype.Text
	CorrelationID pgtype.Text
}

func (q *Queries) CreateEvent(ctx context.Context, arg CreateEventParams) error {
	_, err := q.db.Exec(ctx, createEvent,
		arg.EventID,
		arg.EventTopic,
		arg.EventType,
		arg.Source,
		arg.CreatedAt,
		arg.ExpiresAt,
		arg.Status,
		arg.RetryCount,
		arg.DedupKey,
		arg.Metadata,
		arg.Payload,
		arg.TargetService,
		arg.CorrelationID,
	)
	return err
}

const readEventByDedupKey = `-- name: ReadEventByDedupKey :one
SELECT event_id, event_topic, event_type, source, created_at, expires_at, status, retry_count, dedup_key, metadata, payload, target_service, correlation_id FROM events WHERE dedup_key = $1
`

func (q *Queries) ReadEventByDedupKey(ctx context.Context, dedupKey pgtype.Text) (Event, error) {
	row := q.db.QueryRow(ctx, readEventByDedupKey, dedupKey)
	var i Event
	err := row.Scan(
		&i.EventID,
		&i.EventTopic,
		&i.EventType,
		&i.Source,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.Status,
		&i.RetryCount,
		&i.DedupKey,
		&i.Metadata,
		&i.Payload,
		&i.TargetService,
		&i.CorrelationID,
	)
	return i, err
}

const readEventByEventId = `-- name: ReadEventByEventId :one
SELECT event_id, event_topic, event_type, source, created_at, expires_at, status, retry_count, dedup_key, metadata, payload, target_service, correlation_id FROM events WHERE event_id = $1
`

func (q *Queries) ReadEventByEventId(ctx context.Context, eventID string) (Event, error) {
	row := q.db.QueryRow(ctx, readEventByEventId, eventID)
	var i Event
	err := row.Scan(
		&i.EventID,
		&i.EventTopic,
		&i.EventType,
		&i.Source,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.Status,
		&i.RetryCount,
		&i.DedupKey,
		&i.Metadata,
		&i.Payload,
		&i.TargetService,
		&i.CorrelationID,
	)
	return i, err
}

const updateEventStatus = `-- name: UpdateEventStatus :exec
UPDATE events SET status = $2 WHERE event_id = $1
`

type UpdateEventStatusParams struct {
	EventID string
	Status  DeliveryStatus
}

func (q *Queries) UpdateEventStatus(ctx context.Context, arg UpdateEventStatusParams) error {
	_, err := q.db.Exec(ctx, updateEventStatus, arg.EventID, arg.Status)
	return err
}
