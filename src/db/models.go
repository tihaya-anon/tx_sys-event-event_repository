// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package db

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type DeliveryStatus string

const (
	DeliveryStatusDELIVERYSTATUSUNSPECIFIED DeliveryStatus = "DELIVERY_STATUS_UNSPECIFIED"
	DeliveryStatusPENDING                   DeliveryStatus = "PENDING"
	DeliveryStatusRETRYING                  DeliveryStatus = "RETRYING"
	DeliveryStatusDELIVERED                 DeliveryStatus = "DELIVERED"
	DeliveryStatusDEAD                      DeliveryStatus = "DEAD"
)

func (e *DeliveryStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = DeliveryStatus(s)
	case string:
		*e = DeliveryStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for DeliveryStatus: %T", src)
	}
	return nil
}

type NullDeliveryStatus struct {
	DeliveryStatus DeliveryStatus
	Valid          bool // Valid is true if DeliveryStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullDeliveryStatus) Scan(value interface{}) error {
	if value == nil {
		ns.DeliveryStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.DeliveryStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullDeliveryStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.DeliveryStatus), nil
}

type Event struct {
	EventID       string
	EventTopic    string
	EventType     string
	Source        string
	CreatedAt     int64
	ExpiresAt     pgtype.Int8
	Status        DeliveryStatus
	RetryCount    pgtype.Int4
	DedupKey      pgtype.Text
	Metadata      []byte
	Payload       []byte
	TargetService pgtype.Text
	CorrelationID pgtype.Text
}
