// Code generated by MockGen. DO NOT EDIT.
// Source: query.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	pgtype "github.com/jackc/pgx/v5/pgtype"
	db "github.com/tihaya-anon/tx_sys-event-event_repository/src/db"
)

// MockQuery is a mock of Query interface.
type MockQuery struct {
	ctrl     *gomock.Controller
	recorder *MockQueryMockRecorder
}

// MockQueryMockRecorder is the mock recorder for MockQuery.
type MockQueryMockRecorder struct {
	mock *MockQuery
}

// NewMockQuery creates a new mock instance.
func NewMockQuery(ctrl *gomock.Controller) *MockQuery {
	mock := &MockQuery{ctrl: ctrl}
	mock.recorder = &MockQueryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuery) EXPECT() *MockQueryMockRecorder {
	return m.recorder
}

// CreateEvent mocks base method.
func (m *MockQuery) CreateEvent(ctx context.Context, arg db.CreateEventParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEvent", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateEvent indicates an expected call of CreateEvent.
func (mr *MockQueryMockRecorder) CreateEvent(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEvent", reflect.TypeOf((*MockQuery)(nil).CreateEvent), ctx, arg)
}

// ReadEventByDedupKey mocks base method.
func (m *MockQuery) ReadEventByDedupKey(ctx context.Context, dedupKey pgtype.Text) (db.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadEventByDedupKey", ctx, dedupKey)
	ret0, _ := ret[0].(db.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadEventByDedupKey indicates an expected call of ReadEventByDedupKey.
func (mr *MockQueryMockRecorder) ReadEventByDedupKey(ctx, dedupKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadEventByDedupKey", reflect.TypeOf((*MockQuery)(nil).ReadEventByDedupKey), ctx, dedupKey)
}

// ReadEventByEventId mocks base method.
func (m *MockQuery) ReadEventByEventId(ctx context.Context, eventID string) (db.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadEventByEventId", ctx, eventID)
	ret0, _ := ret[0].(db.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadEventByEventId indicates an expected call of ReadEventByEventId.
func (mr *MockQueryMockRecorder) ReadEventByEventId(ctx, eventID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadEventByEventId", reflect.TypeOf((*MockQuery)(nil).ReadEventByEventId), ctx, eventID)
}

// UpdateEventStatus mocks base method.
func (m *MockQuery) UpdateEventStatus(ctx context.Context, arg db.UpdateEventStatusParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEventStatus", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEventStatus indicates an expected call of UpdateEventStatus.
func (mr *MockQueryMockRecorder) UpdateEventStatus(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEventStatus", reflect.TypeOf((*MockQuery)(nil).UpdateEventStatus), ctx, arg)
}
