// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	kafka_bridge "github.com/tihaya-anon/tx_sys-event-event_repository/src/kafka_bridge"
	listener "github.com/tihaya-anon/tx_sys-event-event_repository/src/listener"
)

// MockKafkaBridgeClient is a mock of KafkaBridgeClient interface.
type MockKafkaBridgeClient struct {
	ctrl     *gomock.Controller
	recorder *MockKafkaBridgeClientMockRecorder
}

// MockKafkaBridgeClientMockRecorder is the mock recorder for MockKafkaBridgeClient.
type MockKafkaBridgeClientMockRecorder struct {
	mock *MockKafkaBridgeClient
}

// NewMockKafkaBridgeClient creates a new mock instance.
func NewMockKafkaBridgeClient(ctrl *gomock.Controller) *MockKafkaBridgeClient {
	mock := &MockKafkaBridgeClient{ctrl: ctrl}
	mock.recorder = &MockKafkaBridgeClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKafkaBridgeClient) EXPECT() *MockKafkaBridgeClientMockRecorder {
	return m.recorder
}

// CreateConsumer mocks base method.
func (m *MockKafkaBridgeClient) CreateConsumer(ctx context.Context, groupID string, consumer kafka_bridge.Consumer) (*kafka_bridge.CreatedConsumer, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConsumer", ctx, groupID, consumer)
	ret0, _ := ret[0].(*kafka_bridge.CreatedConsumer)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateConsumer indicates an expected call of CreateConsumer.
func (mr *MockKafkaBridgeClientMockRecorder) CreateConsumer(ctx, groupID, consumer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConsumer", reflect.TypeOf((*MockKafkaBridgeClient)(nil).CreateConsumer), ctx, groupID, consumer)
}

// DeleteConsumer mocks base method.
func (m *MockKafkaBridgeClient) DeleteConsumer(ctx context.Context, groupID, consumerName string) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteConsumer", ctx, groupID, consumerName)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteConsumer indicates an expected call of DeleteConsumer.
func (mr *MockKafkaBridgeClientMockRecorder) DeleteConsumer(ctx, groupID, consumerName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConsumer", reflect.TypeOf((*MockKafkaBridgeClient)(nil).DeleteConsumer), ctx, groupID, consumerName)
}

// ListSubscriptions mocks base method.
func (m *MockKafkaBridgeClient) ListSubscriptions(ctx context.Context, groupID, consumerName string) (any, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSubscriptions", ctx, groupID, consumerName)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListSubscriptions indicates an expected call of ListSubscriptions.
func (mr *MockKafkaBridgeClientMockRecorder) ListSubscriptions(ctx, groupID, consumerName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubscriptions", reflect.TypeOf((*MockKafkaBridgeClient)(nil).ListSubscriptions), ctx, groupID, consumerName)
}

// Poll mocks base method.
func (m *MockKafkaBridgeClient) Poll(ctx context.Context, groupID, consumerName string, maxBytes int) ([]map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Poll", ctx, groupID, consumerName, maxBytes)
	ret0, _ := ret[0].([]map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Poll indicates an expected call of Poll.
func (mr *MockKafkaBridgeClientMockRecorder) Poll(ctx, groupID, consumerName, maxBytes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Poll", reflect.TypeOf((*MockKafkaBridgeClient)(nil).Poll), ctx, groupID, consumerName, maxBytes)
}

// Subscribe mocks base method.
func (m *MockKafkaBridgeClient) Subscribe(ctx context.Context, groupID, consumerName string, topics kafka_bridge.Topics) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", ctx, groupID, consumerName, topics)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockKafkaBridgeClientMockRecorder) Subscribe(ctx, groupID, consumerName, topics interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockKafkaBridgeClient)(nil).Subscribe), ctx, groupID, consumerName, topics)
}

// MockRedisClient is a mock of RedisClient interface.
type MockRedisClient struct {
	ctrl     *gomock.Controller
	recorder *MockRedisClientMockRecorder
}

// MockRedisClientMockRecorder is the mock recorder for MockRedisClient.
type MockRedisClientMockRecorder struct {
	mock *MockRedisClient
}

// NewMockRedisClient creates a new mock instance.
func NewMockRedisClient(ctrl *gomock.Controller) *MockRedisClient {
	mock := &MockRedisClient{ctrl: ctrl}
	mock.recorder = &MockRedisClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRedisClient) EXPECT() *MockRedisClientMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockRedisClient) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockRedisClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRedisClient)(nil).Close))
}

// Get mocks base method.
func (m *MockRedisClient) Get(ctx context.Context, key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRedisClientMockRecorder) Get(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRedisClient)(nil).Get), ctx, key)
}

// Ping mocks base method.
func (m *MockRedisClient) Ping(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockRedisClientMockRecorder) Ping(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockRedisClient)(nil).Ping), ctx)
}

// Set mocks base method.
func (m *MockRedisClient) Set(ctx context.Context, key, value string, expiration any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, key, value, expiration)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockRedisClientMockRecorder) Set(ctx, key, value, expiration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockRedisClient)(nil).Set), ctx, key, value, expiration)
}

// MockConsumerManagerInterface is a mock of ConsumerManagerInterface interface.
type MockConsumerManagerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockConsumerManagerInterfaceMockRecorder
}

// MockConsumerManagerInterfaceMockRecorder is the mock recorder for MockConsumerManagerInterface.
type MockConsumerManagerInterfaceMockRecorder struct {
	mock *MockConsumerManagerInterface
}

// NewMockConsumerManagerInterface creates a new mock instance.
func NewMockConsumerManagerInterface(ctrl *gomock.Controller) *MockConsumerManagerInterface {
	mock := &MockConsumerManagerInterface{ctrl: ctrl}
	mock.recorder = &MockConsumerManagerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConsumerManagerInterface) EXPECT() *MockConsumerManagerInterfaceMockRecorder {
	return m.recorder
}

// CleanupConsumers mocks base method.
func (m *MockConsumerManagerInterface) CleanupConsumers(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CleanupConsumers", ctx)
}

// CleanupConsumers indicates an expected call of CleanupConsumers.
func (mr *MockConsumerManagerInterfaceMockRecorder) CleanupConsumers(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanupConsumers", reflect.TypeOf((*MockConsumerManagerInterface)(nil).CleanupConsumers), ctx)
}

// GetConsumerInfo mocks base method.
func (m *MockConsumerManagerInterface) GetConsumerInfo(topic string) (*listener.KafkaConsumerInfo, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConsumerInfo", topic)
	ret0, _ := ret[0].(*listener.KafkaConsumerInfo)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetConsumerInfo indicates an expected call of GetConsumerInfo.
func (mr *MockConsumerManagerInterfaceMockRecorder) GetConsumerInfo(topic interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConsumerInfo", reflect.TypeOf((*MockConsumerManagerInterface)(nil).GetConsumerInfo), topic)
}

// GetKafkaBridgeClient mocks base method.
func (m *MockConsumerManagerInterface) GetKafkaBridgeClient() listener.KafkaBridgeClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKafkaBridgeClient")
	ret0, _ := ret[0].(listener.KafkaBridgeClient)
	return ret0
}

// GetKafkaBridgeClient indicates an expected call of GetKafkaBridgeClient.
func (mr *MockConsumerManagerInterfaceMockRecorder) GetKafkaBridgeClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKafkaBridgeClient", reflect.TypeOf((*MockConsumerManagerInterface)(nil).GetKafkaBridgeClient))
}

// InitializeConsumer mocks base method.
func (m *MockConsumerManagerInterface) InitializeConsumer(ctx context.Context, topic string) (*listener.KafkaConsumerInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitializeConsumer", ctx, topic)
	ret0, _ := ret[0].(*listener.KafkaConsumerInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitializeConsumer indicates an expected call of InitializeConsumer.
func (mr *MockConsumerManagerInterfaceMockRecorder) InitializeConsumer(ctx, topic interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitializeConsumer", reflect.TypeOf((*MockConsumerManagerInterface)(nil).InitializeConsumer), ctx, topic)
}

// Shutdown mocks base method.
func (m *MockConsumerManagerInterface) Shutdown(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Shutdown", ctx)
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockConsumerManagerInterfaceMockRecorder) Shutdown(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockConsumerManagerInterface)(nil).Shutdown), ctx)
}
