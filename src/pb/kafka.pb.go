// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.31.1
// source: kafka.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Query_Filter_Operator int32

const (
	Query_Filter_OP_UNSPECIFIED Query_Filter_Operator = 0
	Query_Filter_EQ             Query_Filter_Operator = 1
	Query_Filter_NEQ            Query_Filter_Operator = 2
	Query_Filter_LT             Query_Filter_Operator = 3
	Query_Filter_LTE            Query_Filter_Operator = 4
	Query_Filter_GT             Query_Filter_Operator = 5
	Query_Filter_GTE            Query_Filter_Operator = 6
	Query_Filter_IN             Query_Filter_Operator = 7
	Query_Filter_LIKE           Query_Filter_Operator = 8 // optional if supporting full-text
)

// Enum value maps for Query_Filter_Operator.
var (
	Query_Filter_Operator_name = map[int32]string{
		0: "OP_UNSPECIFIED",
		1: "EQ",
		2: "NEQ",
		3: "LT",
		4: "LTE",
		5: "GT",
		6: "GTE",
		7: "IN",
		8: "LIKE",
	}
	Query_Filter_Operator_value = map[string]int32{
		"OP_UNSPECIFIED": 0,
		"EQ":             1,
		"NEQ":            2,
		"LT":             3,
		"LTE":            4,
		"GT":             5,
		"GTE":            6,
		"IN":             7,
		"LIKE":           8,
	}
)

func (x Query_Filter_Operator) Enum() *Query_Filter_Operator {
	p := new(Query_Filter_Operator)
	*p = x
	return p
}

func (x Query_Filter_Operator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Query_Filter_Operator) Descriptor() protoreflect.EnumDescriptor {
	return file_kafka_proto_enumTypes[0].Descriptor()
}

func (Query_Filter_Operator) Type() protoreflect.EnumType {
	return &file_kafka_proto_enumTypes[0]
}

func (x Query_Filter_Operator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Query_Filter_Operator.Descriptor instead.
func (Query_Filter_Operator) EnumDescriptor() ([]byte, []int) {
	return file_kafka_proto_rawDescGZIP(), []int{0, 0, 0}
}

type Event_DeliveryStatus int32

const (
	Event_DELIVERY_STATUS_UNSPECIFIED Event_DeliveryStatus = 0
	Event_PENDING                     Event_DeliveryStatus = 1
	Event_RETRYING                    Event_DeliveryStatus = 2
	Event_DELIVERED                   Event_DeliveryStatus = 3
	Event_DEAD                        Event_DeliveryStatus = 4
)

// Enum value maps for Event_DeliveryStatus.
var (
	Event_DeliveryStatus_name = map[int32]string{
		0: "DELIVERY_STATUS_UNSPECIFIED",
		1: "PENDING",
		2: "RETRYING",
		3: "DELIVERED",
		4: "DEAD",
	}
	Event_DeliveryStatus_value = map[string]int32{
		"DELIVERY_STATUS_UNSPECIFIED": 0,
		"PENDING":                     1,
		"RETRYING":                    2,
		"DELIVERED":                   3,
		"DEAD":                        4,
	}
)

func (x Event_DeliveryStatus) Enum() *Event_DeliveryStatus {
	p := new(Event_DeliveryStatus)
	*p = x
	return p
}

func (x Event_DeliveryStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Event_DeliveryStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_kafka_proto_enumTypes[1].Descriptor()
}

func (Event_DeliveryStatus) Type() protoreflect.EnumType {
	return &file_kafka_proto_enumTypes[1]
}

func (x Event_DeliveryStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Event_DeliveryStatus.Descriptor instead.
func (Event_DeliveryStatus) EnumDescriptor() ([]byte, []int) {
	return file_kafka_proto_rawDescGZIP(), []int{2, 0}
}

type Query struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filters       []*Query_Filter        `protobuf:"bytes,1,rep,name=filters,proto3" json:"filters,omitempty"`
	SelectFields  []string               `protobuf:"bytes,2,rep,name=select_fields,json=selectFields,proto3" json:"select_fields,omitempty"` // optional: projection
	OrderBy       []*Query_OrderBy       `protobuf:"bytes,3,rep,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	Limit         int32                  `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	PageToken     string                 `protobuf:"bytes,5,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"` // for pagination
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Query) Reset() {
	*x = Query{}
	mi := &file_kafka_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Query) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Query) ProtoMessage() {}

func (x *Query) ProtoReflect() protoreflect.Message {
	mi := &file_kafka_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Query.ProtoReflect.Descriptor instead.
func (*Query) Descriptor() ([]byte, []int) {
	return file_kafka_proto_rawDescGZIP(), []int{0}
}

func (x *Query) GetFilters() []*Query_Filter {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *Query) GetSelectFields() []string {
	if x != nil {
		return x.SelectFields
	}
	return nil
}

func (x *Query) GetOrderBy() []*Query_OrderBy {
	if x != nil {
		return x.OrderBy
	}
	return nil
}

func (x *Query) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *Query) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type Result struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Events        []*Event               `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
	NextPageToken string                 `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	TotalSize     int64                  `protobuf:"varint,3,opt,name=total_size,json=totalSize,proto3" json:"total_size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Result) Reset() {
	*x = Result{}
	mi := &file_kafka_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Result) ProtoMessage() {}

func (x *Result) ProtoReflect() protoreflect.Message {
	mi := &file_kafka_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Result.ProtoReflect.Descriptor instead.
func (*Result) Descriptor() ([]byte, []int) {
	return file_kafka_proto_rawDescGZIP(), []int{1}
}

func (x *Result) GetEvents() []*Event {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *Result) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *Result) GetTotalSize() int64 {
	if x != nil {
		return x.TotalSize
	}
	return 0
}

type Event struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EventId       string                 `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	EventTopic    string                 `protobuf:"bytes,2,opt,name=event_topic,json=eventTopic,proto3" json:"event_topic,omitempty"`
	EventType     string                 `protobuf:"bytes,3,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"`
	Source        string                 `protobuf:"bytes,4,opt,name=source,proto3" json:"source,omitempty"`
	CreatedAt     int64                  `protobuf:"varint,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	ExpiresAt     int64                  `protobuf:"varint,6,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
	Status        Event_DeliveryStatus   `protobuf:"varint,7,opt,name=status,proto3,enum=kafka.Event_DeliveryStatus" json:"status,omitempty"`
	RetryCount    int32                  `protobuf:"varint,8,opt,name=retry_count,json=retryCount,proto3" json:"retry_count,omitempty"`
	DedupKey      string                 `protobuf:"bytes,9,opt,name=dedup_key,json=dedupKey,proto3" json:"dedup_key,omitempty"`
	Metadata      map[string]string      `protobuf:"bytes,10,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Payload       []byte                 `protobuf:"bytes,11,opt,name=payload,proto3" json:"payload,omitempty"`
	TargetService string                 `protobuf:"bytes,12,opt,name=target_service,json=targetService,proto3" json:"target_service,omitempty"` // Filled by router or producer
	CorrelationId string                 `protobuf:"bytes,13,opt,name=correlation_id,json=correlationId,proto3" json:"correlation_id,omitempty"` // For tracing
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Event) Reset() {
	*x = Event{}
	mi := &file_kafka_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_kafka_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_kafka_proto_rawDescGZIP(), []int{2}
}

func (x *Event) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *Event) GetEventTopic() string {
	if x != nil {
		return x.EventTopic
	}
	return ""
}

func (x *Event) GetEventType() string {
	if x != nil {
		return x.EventType
	}
	return ""
}

func (x *Event) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Event) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Event) GetExpiresAt() int64 {
	if x != nil {
		return x.ExpiresAt
	}
	return 0
}

func (x *Event) GetStatus() Event_DeliveryStatus {
	if x != nil {
		return x.Status
	}
	return Event_DELIVERY_STATUS_UNSPECIFIED
}

func (x *Event) GetRetryCount() int32 {
	if x != nil {
		return x.RetryCount
	}
	return 0
}

func (x *Event) GetDedupKey() string {
	if x != nil {
		return x.DedupKey
	}
	return ""
}

func (x *Event) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Event) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *Event) GetTargetService() string {
	if x != nil {
		return x.TargetService
	}
	return ""
}

func (x *Event) GetCorrelationId() string {
	if x != nil {
		return x.CorrelationId
	}
	return ""
}

type Query_Filter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Field         string                 `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"` // e.g., "status", "topic", "created_at", "metadata.source"
	Op            Query_Filter_Operator  `protobuf:"varint,2,opt,name=op,proto3,enum=kafka.Query_Filter_Operator" json:"op,omitempty"`
	Values        []string               `protobuf:"bytes,3,rep,name=values,proto3" json:"values,omitempty"` // For IN or single-element match
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Query_Filter) Reset() {
	*x = Query_Filter{}
	mi := &file_kafka_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Query_Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Query_Filter) ProtoMessage() {}

func (x *Query_Filter) ProtoReflect() protoreflect.Message {
	mi := &file_kafka_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Query_Filter.ProtoReflect.Descriptor instead.
func (*Query_Filter) Descriptor() ([]byte, []int) {
	return file_kafka_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Query_Filter) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *Query_Filter) GetOp() Query_Filter_Operator {
	if x != nil {
		return x.Op
	}
	return Query_Filter_OP_UNSPECIFIED
}

func (x *Query_Filter) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

type Query_OrderBy struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Field         string                 `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	Descending    bool                   `protobuf:"varint,2,opt,name=descending,proto3" json:"descending,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Query_OrderBy) Reset() {
	*x = Query_OrderBy{}
	mi := &file_kafka_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Query_OrderBy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Query_OrderBy) ProtoMessage() {}

func (x *Query_OrderBy) ProtoReflect() protoreflect.Message {
	mi := &file_kafka_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Query_OrderBy.ProtoReflect.Descriptor instead.
func (*Query_OrderBy) Descriptor() ([]byte, []int) {
	return file_kafka_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Query_OrderBy) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *Query_OrderBy) GetDescending() bool {
	if x != nil {
		return x.Descending
	}
	return false
}

var File_kafka_proto protoreflect.FileDescriptor

const file_kafka_proto_rawDesc = "" +
	"\n" +
	"\vkafka.proto\x12\x05kafka\"\xce\x03\n" +
	"\x05Query\x12-\n" +
	"\afilters\x18\x01 \x03(\v2\x13.kafka.Query.FilterR\afilters\x12#\n" +
	"\rselect_fields\x18\x02 \x03(\tR\fselectFields\x12/\n" +
	"\border_by\x18\x03 \x03(\v2\x14.kafka.Query.OrderByR\aorderBy\x12\x14\n" +
	"\x05limit\x18\x04 \x01(\x05R\x05limit\x12\x1d\n" +
	"\n" +
	"page_token\x18\x05 \x01(\tR\tpageToken\x1a\xc9\x01\n" +
	"\x06Filter\x12\x14\n" +
	"\x05field\x18\x01 \x01(\tR\x05field\x12,\n" +
	"\x02op\x18\x02 \x01(\x0e2\x1c.kafka.Query.Filter.OperatorR\x02op\x12\x16\n" +
	"\x06values\x18\x03 \x03(\tR\x06values\"c\n" +
	"\bOperator\x12\x12\n" +
	"\x0eOP_UNSPECIFIED\x10\x00\x12\x06\n" +
	"\x02EQ\x10\x01\x12\a\n" +
	"\x03NEQ\x10\x02\x12\x06\n" +
	"\x02LT\x10\x03\x12\a\n" +
	"\x03LTE\x10\x04\x12\x06\n" +
	"\x02GT\x10\x05\x12\a\n" +
	"\x03GTE\x10\x06\x12\x06\n" +
	"\x02IN\x10\a\x12\b\n" +
	"\x04LIKE\x10\b\x1a?\n" +
	"\aOrderBy\x12\x14\n" +
	"\x05field\x18\x01 \x01(\tR\x05field\x12\x1e\n" +
	"\n" +
	"descending\x18\x02 \x01(\bR\n" +
	"descending\"u\n" +
	"\x06Result\x12$\n" +
	"\x06events\x18\x01 \x03(\v2\f.kafka.EventR\x06events\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\x12\x1d\n" +
	"\n" +
	"total_size\x18\x03 \x01(\x03R\ttotalSize\"\xef\x04\n" +
	"\x05Event\x12\x19\n" +
	"\bevent_id\x18\x01 \x01(\tR\aeventId\x12\x1f\n" +
	"\vevent_topic\x18\x02 \x01(\tR\n" +
	"eventTopic\x12\x1d\n" +
	"\n" +
	"event_type\x18\x03 \x01(\tR\teventType\x12\x16\n" +
	"\x06source\x18\x04 \x01(\tR\x06source\x12\x1d\n" +
	"\n" +
	"created_at\x18\x05 \x01(\x03R\tcreatedAt\x12\x1d\n" +
	"\n" +
	"expires_at\x18\x06 \x01(\x03R\texpiresAt\x123\n" +
	"\x06status\x18\a \x01(\x0e2\x1b.kafka.Event.DeliveryStatusR\x06status\x12\x1f\n" +
	"\vretry_count\x18\b \x01(\x05R\n" +
	"retryCount\x12\x1b\n" +
	"\tdedup_key\x18\t \x01(\tR\bdedupKey\x126\n" +
	"\bmetadata\x18\n" +
	" \x03(\v2\x1a.kafka.Event.MetadataEntryR\bmetadata\x12\x18\n" +
	"\apayload\x18\v \x01(\fR\apayload\x12%\n" +
	"\x0etarget_service\x18\f \x01(\tR\rtargetService\x12%\n" +
	"\x0ecorrelation_id\x18\r \x01(\tR\rcorrelationId\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"e\n" +
	"\x0eDeliveryStatus\x12\x1f\n" +
	"\x1bDELIVERY_STATUS_UNSPECIFIED\x10\x00\x12\v\n" +
	"\aPENDING\x10\x01\x12\f\n" +
	"\bRETRYING\x10\x02\x12\r\n" +
	"\tDELIVERED\x10\x03\x12\b\n" +
	"\x04DEAD\x10\x04B\x05Z\x03/pbb\x06proto3"

var (
	file_kafka_proto_rawDescOnce sync.Once
	file_kafka_proto_rawDescData []byte
)

func file_kafka_proto_rawDescGZIP() []byte {
	file_kafka_proto_rawDescOnce.Do(func() {
		file_kafka_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_kafka_proto_rawDesc), len(file_kafka_proto_rawDesc)))
	})
	return file_kafka_proto_rawDescData
}

var file_kafka_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_kafka_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_kafka_proto_goTypes = []any{
	(Query_Filter_Operator)(0), // 0: kafka.Query.Filter.Operator
	(Event_DeliveryStatus)(0),  // 1: kafka.Event.DeliveryStatus
	(*Query)(nil),              // 2: kafka.Query
	(*Result)(nil),             // 3: kafka.Result
	(*Event)(nil),              // 4: kafka.Event
	(*Query_Filter)(nil),       // 5: kafka.Query.Filter
	(*Query_OrderBy)(nil),      // 6: kafka.Query.OrderBy
	nil,                        // 7: kafka.Event.MetadataEntry
}
var file_kafka_proto_depIdxs = []int32{
	5, // 0: kafka.Query.filters:type_name -> kafka.Query.Filter
	6, // 1: kafka.Query.order_by:type_name -> kafka.Query.OrderBy
	4, // 2: kafka.Result.events:type_name -> kafka.Event
	1, // 3: kafka.Event.status:type_name -> kafka.Event.DeliveryStatus
	7, // 4: kafka.Event.metadata:type_name -> kafka.Event.MetadataEntry
	0, // 5: kafka.Query.Filter.op:type_name -> kafka.Query.Filter.Operator
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_kafka_proto_init() }
func file_kafka_proto_init() {
	if File_kafka_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_kafka_proto_rawDesc), len(file_kafka_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_kafka_proto_goTypes,
		DependencyIndexes: file_kafka_proto_depIdxs,
		EnumInfos:         file_kafka_proto_enumTypes,
		MessageInfos:      file_kafka_proto_msgTypes,
	}.Build()
	File_kafka_proto = out.File
	file_kafka_proto_goTypes = nil
	file_kafka_proto_depIdxs = nil
}
