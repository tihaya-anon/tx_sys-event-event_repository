// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: kafka/event_repository.proto

package kafka

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EventRepository_CreateEvent_FullMethodName    = "/event_repository.EventRepository/CreateEvent"
	EventRepository_RetryingEvent_FullMethodName  = "/event_repository.EventRepository/RetryingEvent"
	EventRepository_DeliveredEvent_FullMethodName = "/event_repository.EventRepository/DeliveredEvent"
	EventRepository_DeadEvent_FullMethodName      = "/event_repository.EventRepository/DeadEvent"
	EventRepository_ReadEvent_FullMethodName      = "/event_repository.EventRepository/ReadEvent"
)

// EventRepositoryClient is the client API for EventRepository service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventRepositoryClient interface {
	CreateEvent(ctx context.Context, in *CreateEventReq, opts ...grpc.CallOption) (*CreateEventResp, error)
	RetryingEvent(ctx context.Context, in *RetryingEventReq, opts ...grpc.CallOption) (*RetryingEventResp, error)
	DeliveredEvent(ctx context.Context, in *DeliveredEventReq, opts ...grpc.CallOption) (*DeliveredEventResp, error)
	DeadEvent(ctx context.Context, in *DeadEventReq, opts ...grpc.CallOption) (*DeadEventResp, error)
	ReadEvent(ctx context.Context, in *ReadEventReq, opts ...grpc.CallOption) (*ReadEventResp, error)
}

type eventRepositoryClient struct {
	cc grpc.ClientConnInterface
}

func NewEventRepositoryClient(cc grpc.ClientConnInterface) EventRepositoryClient {
	return &eventRepositoryClient{cc}
}

func (c *eventRepositoryClient) CreateEvent(ctx context.Context, in *CreateEventReq, opts ...grpc.CallOption) (*CreateEventResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateEventResp)
	err := c.cc.Invoke(ctx, EventRepository_CreateEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventRepositoryClient) RetryingEvent(ctx context.Context, in *RetryingEventReq, opts ...grpc.CallOption) (*RetryingEventResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RetryingEventResp)
	err := c.cc.Invoke(ctx, EventRepository_RetryingEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventRepositoryClient) DeliveredEvent(ctx context.Context, in *DeliveredEventReq, opts ...grpc.CallOption) (*DeliveredEventResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeliveredEventResp)
	err := c.cc.Invoke(ctx, EventRepository_DeliveredEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventRepositoryClient) DeadEvent(ctx context.Context, in *DeadEventReq, opts ...grpc.CallOption) (*DeadEventResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeadEventResp)
	err := c.cc.Invoke(ctx, EventRepository_DeadEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventRepositoryClient) ReadEvent(ctx context.Context, in *ReadEventReq, opts ...grpc.CallOption) (*ReadEventResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReadEventResp)
	err := c.cc.Invoke(ctx, EventRepository_ReadEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventRepositoryServer is the server API for EventRepository service.
// All implementations must embed UnimplementedEventRepositoryServer
// for forward compatibility.
type EventRepositoryServer interface {
	CreateEvent(context.Context, *CreateEventReq) (*CreateEventResp, error)
	RetryingEvent(context.Context, *RetryingEventReq) (*RetryingEventResp, error)
	DeliveredEvent(context.Context, *DeliveredEventReq) (*DeliveredEventResp, error)
	DeadEvent(context.Context, *DeadEventReq) (*DeadEventResp, error)
	ReadEvent(context.Context, *ReadEventReq) (*ReadEventResp, error)
	mustEmbedUnimplementedEventRepositoryServer()
}

// UnimplementedEventRepositoryServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEventRepositoryServer struct{}

func (UnimplementedEventRepositoryServer) CreateEvent(context.Context, *CreateEventReq) (*CreateEventResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEvent not implemented")
}
func (UnimplementedEventRepositoryServer) RetryingEvent(context.Context, *RetryingEventReq) (*RetryingEventResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetryingEvent not implemented")
}
func (UnimplementedEventRepositoryServer) DeliveredEvent(context.Context, *DeliveredEventReq) (*DeliveredEventResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeliveredEvent not implemented")
}
func (UnimplementedEventRepositoryServer) DeadEvent(context.Context, *DeadEventReq) (*DeadEventResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeadEvent not implemented")
}
func (UnimplementedEventRepositoryServer) ReadEvent(context.Context, *ReadEventReq) (*ReadEventResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadEvent not implemented")
}
func (UnimplementedEventRepositoryServer) mustEmbedUnimplementedEventRepositoryServer() {}
func (UnimplementedEventRepositoryServer) testEmbeddedByValue()                         {}

// UnsafeEventRepositoryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventRepositoryServer will
// result in compilation errors.
type UnsafeEventRepositoryServer interface {
	mustEmbedUnimplementedEventRepositoryServer()
}

func RegisterEventRepositoryServer(s grpc.ServiceRegistrar, srv EventRepositoryServer) {
	// If the following call pancis, it indicates UnimplementedEventRepositoryServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EventRepository_ServiceDesc, srv)
}

func _EventRepository_CreateEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEventReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventRepositoryServer).CreateEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventRepository_CreateEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventRepositoryServer).CreateEvent(ctx, req.(*CreateEventReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventRepository_RetryingEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetryingEventReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventRepositoryServer).RetryingEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventRepository_RetryingEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventRepositoryServer).RetryingEvent(ctx, req.(*RetryingEventReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventRepository_DeliveredEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeliveredEventReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventRepositoryServer).DeliveredEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventRepository_DeliveredEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventRepositoryServer).DeliveredEvent(ctx, req.(*DeliveredEventReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventRepository_DeadEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeadEventReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventRepositoryServer).DeadEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventRepository_DeadEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventRepositoryServer).DeadEvent(ctx, req.(*DeadEventReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventRepository_ReadEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadEventReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventRepositoryServer).ReadEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventRepository_ReadEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventRepositoryServer).ReadEvent(ctx, req.(*ReadEventReq))
	}
	return interceptor(ctx, in, info, handler)
}

// EventRepository_ServiceDesc is the grpc.ServiceDesc for EventRepository service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EventRepository_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "event_repository.EventRepository",
	HandlerType: (*EventRepositoryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateEvent",
			Handler:    _EventRepository_CreateEvent_Handler,
		},
		{
			MethodName: "RetryingEvent",
			Handler:    _EventRepository_RetryingEvent_Handler,
		},
		{
			MethodName: "DeliveredEvent",
			Handler:    _EventRepository_DeliveredEvent_Handler,
		},
		{
			MethodName: "DeadEvent",
			Handler:    _EventRepository_DeadEvent_Handler,
		},
		{
			MethodName: "ReadEvent",
			Handler:    _EventRepository_ReadEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kafka/event_repository.proto",
}
