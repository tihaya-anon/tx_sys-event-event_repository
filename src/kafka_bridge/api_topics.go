/*
Kafka Bridge API Reference

The Kafka Bridge provides a REST API for integrating HTTP based client applications with a Kafka cluster. You can use the API to create and manage consumers and send and receive records over HTTP rather than the native Kafka protocol. 

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kafka_bridge

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// TopicsAPIService TopicsAPI service
type TopicsAPIService service

type TopicsAPICreateTopicRequest struct {
	ctx context.Context
	ApiService *TopicsAPIService
	newTopic *NewTopic
}

// Creates a topic with given name, partitions count, and replication factor.
func (r TopicsAPICreateTopicRequest) NewTopic(newTopic NewTopic) TopicsAPICreateTopicRequest {
	r.newTopic = &newTopic
	return r
}

func (r TopicsAPICreateTopicRequest) Execute() (*http.Response, error) {
	return r.ApiService.CreateTopicExecute(r)
}

/*
CreateTopic Method for CreateTopic

Creates a topic with given name, partitions count, and replication factor.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return TopicsAPICreateTopicRequest
*/
func (a *TopicsAPIService) CreateTopic(ctx context.Context) TopicsAPICreateTopicRequest {
	return TopicsAPICreateTopicRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *TopicsAPIService) CreateTopicExecute(r TopicsAPICreateTopicRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TopicsAPIService.CreateTopic")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/topics"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.newTopic == nil {
		return nil, reportError("newTopic is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/vnd.kafka.json.v2+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.newTopic
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type TopicsAPIGetOffsetsRequest struct {
	ctx context.Context
	ApiService *TopicsAPIService
	topicname string
	partitionid int32
}

func (r TopicsAPIGetOffsetsRequest) Execute() (*OffsetsSummary, *http.Response, error) {
	return r.ApiService.GetOffsetsExecute(r)
}

/*
GetOffsets Method for GetOffsets

Retrieves a summary of the offsets for the topic partition.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param topicname Name of the topic containing the partition.
 @param partitionid ID of the partition.
 @return TopicsAPIGetOffsetsRequest
*/
func (a *TopicsAPIService) GetOffsets(ctx context.Context, topicname string, partitionid int32) TopicsAPIGetOffsetsRequest {
	return TopicsAPIGetOffsetsRequest{
		ApiService: a,
		ctx: ctx,
		topicname: topicname,
		partitionid: partitionid,
	}
}

// Execute executes the request
//  @return OffsetsSummary
func (a *TopicsAPIService) GetOffsetsExecute(r TopicsAPIGetOffsetsRequest) (*OffsetsSummary, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OffsetsSummary
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TopicsAPIService.GetOffsets")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/topics/{topicname}/partitions/{partitionid}/offsets"
	localVarPath = strings.Replace(localVarPath, "{"+"topicname"+"}", url.PathEscape(parameterValueToString(r.topicname, "topicname")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"partitionid"+"}", url.PathEscape(parameterValueToString(r.partitionid, "partitionid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.kafka.v2+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type TopicsAPIGetPartitionRequest struct {
	ctx context.Context
	ApiService *TopicsAPIService
	topicname string
	partitionid int32
}

func (r TopicsAPIGetPartitionRequest) Execute() (*PartitionMetadata, *http.Response, error) {
	return r.ApiService.GetPartitionExecute(r)
}

/*
GetPartition Method for GetPartition

Retrieves partition metadata for the topic partition.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param topicname Name of the topic to send records to or retrieve metadata from.
 @param partitionid ID of the partition to send records to or retrieve metadata from.
 @return TopicsAPIGetPartitionRequest
*/
func (a *TopicsAPIService) GetPartition(ctx context.Context, topicname string, partitionid int32) TopicsAPIGetPartitionRequest {
	return TopicsAPIGetPartitionRequest{
		ApiService: a,
		ctx: ctx,
		topicname: topicname,
		partitionid: partitionid,
	}
}

// Execute executes the request
//  @return PartitionMetadata
func (a *TopicsAPIService) GetPartitionExecute(r TopicsAPIGetPartitionRequest) (*PartitionMetadata, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PartitionMetadata
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TopicsAPIService.GetPartition")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/topics/{topicname}/partitions/{partitionid}"
	localVarPath = strings.Replace(localVarPath, "{"+"topicname"+"}", url.PathEscape(parameterValueToString(r.topicname, "topicname")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"partitionid"+"}", url.PathEscape(parameterValueToString(r.partitionid, "partitionid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.kafka.v2+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type TopicsAPIGetTopicRequest struct {
	ctx context.Context
	ApiService *TopicsAPIService
	topicname string
}

func (r TopicsAPIGetTopicRequest) Execute() (*TopicMetadata, *http.Response, error) {
	return r.ApiService.GetTopicExecute(r)
}

/*
GetTopic Method for GetTopic

Retrieves the metadata about a given topic.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param topicname Name of the topic to send records to or retrieve metadata from.
 @return TopicsAPIGetTopicRequest
*/
func (a *TopicsAPIService) GetTopic(ctx context.Context, topicname string) TopicsAPIGetTopicRequest {
	return TopicsAPIGetTopicRequest{
		ApiService: a,
		ctx: ctx,
		topicname: topicname,
	}
}

// Execute executes the request
//  @return TopicMetadata
func (a *TopicsAPIService) GetTopicExecute(r TopicsAPIGetTopicRequest) (*TopicMetadata, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TopicMetadata
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TopicsAPIService.GetTopic")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/topics/{topicname}"
	localVarPath = strings.Replace(localVarPath, "{"+"topicname"+"}", url.PathEscape(parameterValueToString(r.topicname, "topicname")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.kafka.v2+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type TopicsAPIListPartitionsRequest struct {
	ctx context.Context
	ApiService *TopicsAPIService
	topicname string
}

func (r TopicsAPIListPartitionsRequest) Execute() ([]PartitionMetadata, *http.Response, error) {
	return r.ApiService.ListPartitionsExecute(r)
}

/*
ListPartitions Method for ListPartitions

Retrieves a list of partitions for the topic.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param topicname Name of the topic to send records to or retrieve metadata from.
 @return TopicsAPIListPartitionsRequest
*/
func (a *TopicsAPIService) ListPartitions(ctx context.Context, topicname string) TopicsAPIListPartitionsRequest {
	return TopicsAPIListPartitionsRequest{
		ApiService: a,
		ctx: ctx,
		topicname: topicname,
	}
}

// Execute executes the request
//  @return []PartitionMetadata
func (a *TopicsAPIService) ListPartitionsExecute(r TopicsAPIListPartitionsRequest) ([]PartitionMetadata, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []PartitionMetadata
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TopicsAPIService.ListPartitions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/topics/{topicname}/partitions"
	localVarPath = strings.Replace(localVarPath, "{"+"topicname"+"}", url.PathEscape(parameterValueToString(r.topicname, "topicname")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.kafka.v2+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type TopicsAPIListTopicsRequest struct {
	ctx context.Context
	ApiService *TopicsAPIService
}

func (r TopicsAPIListTopicsRequest) Execute() ([]string, *http.Response, error) {
	return r.ApiService.ListTopicsExecute(r)
}

/*
ListTopics Method for ListTopics

Retrieves a list of all topics.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return TopicsAPIListTopicsRequest
*/
func (a *TopicsAPIService) ListTopics(ctx context.Context) TopicsAPIListTopicsRequest {
	return TopicsAPIListTopicsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []string
func (a *TopicsAPIService) ListTopicsExecute(r TopicsAPIListTopicsRequest) ([]string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TopicsAPIService.ListTopics")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/topics"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.kafka.v2+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type TopicsAPISendRequest struct {
	ctx context.Context
	ApiService *TopicsAPIService
	topicname string
	producerRecordList *ProducerRecordList
	async *bool
}

func (r TopicsAPISendRequest) ProducerRecordList(producerRecordList ProducerRecordList) TopicsAPISendRequest {
	r.producerRecordList = &producerRecordList
	return r
}

// Ignore metadata as result of the sending operation, not returning them to the client. If not specified it is false, metadata returned.
func (r TopicsAPISendRequest) Async(async bool) TopicsAPISendRequest {
	r.async = &async
	return r
}

func (r TopicsAPISendRequest) Execute() (*OffsetRecordSentList, *http.Response, error) {
	return r.ApiService.SendExecute(r)
}

/*
Send Method for Send

Sends one or more records to a given topic, optionally specifying a partition, key, or both.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param topicname Name of the topic to send records to or retrieve metadata from.
 @return TopicsAPISendRequest
*/
func (a *TopicsAPIService) Send(ctx context.Context, topicname string) TopicsAPISendRequest {
	return TopicsAPISendRequest{
		ApiService: a,
		ctx: ctx,
		topicname: topicname,
	}
}

// Execute executes the request
//  @return OffsetRecordSentList
func (a *TopicsAPIService) SendExecute(r TopicsAPISendRequest) (*OffsetRecordSentList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OffsetRecordSentList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TopicsAPIService.Send")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/topics/{topicname}"
	localVarPath = strings.Replace(localVarPath, "{"+"topicname"+"}", url.PathEscape(parameterValueToString(r.topicname, "topicname")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.producerRecordList == nil {
		return localVarReturnValue, nil, reportError("producerRecordList is required and must be specified")
	}

	if r.async != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "async", r.async, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/vnd.kafka.json.v2+json", "application/vnd.kafka.binary.v2+json", "application/vnd.kafka.text.v2+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.kafka.v2+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.producerRecordList
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type TopicsAPISendToPartitionRequest struct {
	ctx context.Context
	ApiService *TopicsAPIService
	topicname string
	partitionid int32
	producerRecordToPartitionList *ProducerRecordToPartitionList
	async *bool
}

// List of records to send to a given topic partition, including a value (required) and a key (optional).
func (r TopicsAPISendToPartitionRequest) ProducerRecordToPartitionList(producerRecordToPartitionList ProducerRecordToPartitionList) TopicsAPISendToPartitionRequest {
	r.producerRecordToPartitionList = &producerRecordToPartitionList
	return r
}

// Whether to return immediately upon sending records, instead of waiting for metadata. No offsets will be returned if specified. Defaults to false.
func (r TopicsAPISendToPartitionRequest) Async(async bool) TopicsAPISendToPartitionRequest {
	r.async = &async
	return r
}

func (r TopicsAPISendToPartitionRequest) Execute() (*OffsetRecordSentList, *http.Response, error) {
	return r.ApiService.SendToPartitionExecute(r)
}

/*
SendToPartition Method for SendToPartition

Sends one or more records to a given topic partition, optionally specifying a key.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param topicname Name of the topic to send records to or retrieve metadata from.
 @param partitionid ID of the partition to send records to or retrieve metadata from.
 @return TopicsAPISendToPartitionRequest
*/
func (a *TopicsAPIService) SendToPartition(ctx context.Context, topicname string, partitionid int32) TopicsAPISendToPartitionRequest {
	return TopicsAPISendToPartitionRequest{
		ApiService: a,
		ctx: ctx,
		topicname: topicname,
		partitionid: partitionid,
	}
}

// Execute executes the request
//  @return OffsetRecordSentList
func (a *TopicsAPIService) SendToPartitionExecute(r TopicsAPISendToPartitionRequest) (*OffsetRecordSentList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OffsetRecordSentList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TopicsAPIService.SendToPartition")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/topics/{topicname}/partitions/{partitionid}"
	localVarPath = strings.Replace(localVarPath, "{"+"topicname"+"}", url.PathEscape(parameterValueToString(r.topicname, "topicname")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"partitionid"+"}", url.PathEscape(parameterValueToString(r.partitionid, "partitionid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.producerRecordToPartitionList == nil {
		return localVarReturnValue, nil, reportError("producerRecordToPartitionList is required and must be specified")
	}

	if r.async != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "async", r.async, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/vnd.kafka.json.v2+json", "application/vnd.kafka.binary.v2+json", "application/vnd.kafka.text.v2+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.kafka.v2+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.producerRecordToPartitionList
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
