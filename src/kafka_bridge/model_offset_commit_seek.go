/*
Kafka Bridge API Reference

The Kafka Bridge provides a REST API for integrating HTTP based client applications with a Kafka cluster. You can use the API to create and manage consumers and send and receive records over HTTP rather than the native Kafka protocol. 

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kafka_bridge

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the OffsetCommitSeek type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OffsetCommitSeek{}

// OffsetCommitSeek struct for OffsetCommitSeek
type OffsetCommitSeek struct {
	Partition int32 `json:"partition"`
	Offset int64 `json:"offset"`
	Topic string `json:"topic"`
}

type _OffsetCommitSeek OffsetCommitSeek

// NewOffsetCommitSeek instantiates a new OffsetCommitSeek object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOffsetCommitSeek(partition int32, offset int64, topic string) *OffsetCommitSeek {
	this := OffsetCommitSeek{}
	this.Partition = partition
	this.Offset = offset
	this.Topic = topic
	return &this
}

// NewOffsetCommitSeekWithDefaults instantiates a new OffsetCommitSeek object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOffsetCommitSeekWithDefaults() *OffsetCommitSeek {
	this := OffsetCommitSeek{}
	return &this
}

// GetPartition returns the Partition field value
func (o *OffsetCommitSeek) GetPartition() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Partition
}

// GetPartitionOk returns a tuple with the Partition field value
// and a boolean to check if the value has been set.
func (o *OffsetCommitSeek) GetPartitionOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Partition, true
}

// SetPartition sets field value
func (o *OffsetCommitSeek) SetPartition(v int32) {
	o.Partition = v
}

// GetOffset returns the Offset field value
func (o *OffsetCommitSeek) GetOffset() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Offset
}

// GetOffsetOk returns a tuple with the Offset field value
// and a boolean to check if the value has been set.
func (o *OffsetCommitSeek) GetOffsetOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Offset, true
}

// SetOffset sets field value
func (o *OffsetCommitSeek) SetOffset(v int64) {
	o.Offset = v
}

// GetTopic returns the Topic field value
func (o *OffsetCommitSeek) GetTopic() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Topic
}

// GetTopicOk returns a tuple with the Topic field value
// and a boolean to check if the value has been set.
func (o *OffsetCommitSeek) GetTopicOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Topic, true
}

// SetTopic sets field value
func (o *OffsetCommitSeek) SetTopic(v string) {
	o.Topic = v
}

func (o OffsetCommitSeek) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OffsetCommitSeek) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["partition"] = o.Partition
	toSerialize["offset"] = o.Offset
	toSerialize["topic"] = o.Topic
	return toSerialize, nil
}

func (o *OffsetCommitSeek) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"partition",
		"offset",
		"topic",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOffsetCommitSeek := _OffsetCommitSeek{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOffsetCommitSeek)

	if err != nil {
		return err
	}

	*o = OffsetCommitSeek(varOffsetCommitSeek)

	return err
}

type NullableOffsetCommitSeek struct {
	value *OffsetCommitSeek
	isSet bool
}

func (v NullableOffsetCommitSeek) Get() *OffsetCommitSeek {
	return v.value
}

func (v *NullableOffsetCommitSeek) Set(val *OffsetCommitSeek) {
	v.value = val
	v.isSet = true
}

func (v NullableOffsetCommitSeek) IsSet() bool {
	return v.isSet
}

func (v *NullableOffsetCommitSeek) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOffsetCommitSeek(val *OffsetCommitSeek) *NullableOffsetCommitSeek {
	return &NullableOffsetCommitSeek{value: val, isSet: true}
}

func (v NullableOffsetCommitSeek) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOffsetCommitSeek) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


