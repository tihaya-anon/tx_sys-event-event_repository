/*
Kafka Bridge API Reference

Testing ConsumersAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package kafka_bridge

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/tihaya-anon/tx_sys-event-event_repository/src/kafka_bridge"
)

func Test_kafka_bridge_ConsumersAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ConsumersAPIService Assign", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupid string
		var name string

		httpRes, err := apiClient.ConsumersAPI.Assign(context.Background(), groupid, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConsumersAPIService Commit", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupid string
		var name string

		httpRes, err := apiClient.ConsumersAPI.Commit(context.Background(), groupid, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConsumersAPIService CreateConsumer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupid string

		resp, httpRes, err := apiClient.ConsumersAPI.CreateConsumer(context.Background(), groupid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConsumersAPIService DeleteConsumer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupid string
		var name string

		httpRes, err := apiClient.ConsumersAPI.DeleteConsumer(context.Background(), groupid, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConsumersAPIService ListSubscriptions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupid string
		var name string

		resp, httpRes, err := apiClient.ConsumersAPI.ListSubscriptions(context.Background(), groupid, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConsumersAPIService Poll", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupid string
		var name string

		resp, httpRes, err := apiClient.ConsumersAPI.Poll(context.Background(), groupid, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConsumersAPIService Seek", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupid string
		var name string

		httpRes, err := apiClient.ConsumersAPI.Seek(context.Background(), groupid, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConsumersAPIService SeekToBeginning", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupid string
		var name string

		httpRes, err := apiClient.ConsumersAPI.SeekToBeginning(context.Background(), groupid, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConsumersAPIService SeekToEnd", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupid string
		var name string

		httpRes, err := apiClient.ConsumersAPI.SeekToEnd(context.Background(), groupid, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConsumersAPIService Subscribe", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupid string
		var name string

		httpRes, err := apiClient.ConsumersAPI.Subscribe(context.Background(), groupid, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConsumersAPIService Unsubscribe", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupid string
		var name string

		httpRes, err := apiClient.ConsumersAPI.Unsubscribe(context.Background(), groupid, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
