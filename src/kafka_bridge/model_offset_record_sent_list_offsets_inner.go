/*
Kafka Bridge API Reference

The Kafka Bridge provides a REST API for integrating HTTP based client applications with a Kafka cluster. You can use the API to create and manage consumers and send and receive records over HTTP rather than the native Kafka protocol. 

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kafka_bridge

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// OffsetRecordSentListOffsetsInner - struct for OffsetRecordSentListOffsetsInner
type OffsetRecordSentListOffsetsInner struct {
	Error *Error
	OffsetRecordSent *OffsetRecordSent
}

// ErrorAsOffsetRecordSentListOffsetsInner is a convenience function that returns Error wrapped in OffsetRecordSentListOffsetsInner
func ErrorAsOffsetRecordSentListOffsetsInner(v *Error) OffsetRecordSentListOffsetsInner {
	return OffsetRecordSentListOffsetsInner{
		Error: v,
	}
}

// OffsetRecordSentAsOffsetRecordSentListOffsetsInner is a convenience function that returns OffsetRecordSent wrapped in OffsetRecordSentListOffsetsInner
func OffsetRecordSentAsOffsetRecordSentListOffsetsInner(v *OffsetRecordSent) OffsetRecordSentListOffsetsInner {
	return OffsetRecordSentListOffsetsInner{
		OffsetRecordSent: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *OffsetRecordSentListOffsetsInner) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into Error
	err = newStrictDecoder(data).Decode(&dst.Error)
	if err == nil {
		jsonError, _ := json.Marshal(dst.Error)
		if string(jsonError) == "{}" { // empty struct
			dst.Error = nil
		} else {
			if err = validator.Validate(dst.Error); err != nil {
				dst.Error = nil
			} else {
				match++
			}
		}
	} else {
		dst.Error = nil
	}

	// try to unmarshal data into OffsetRecordSent
	err = newStrictDecoder(data).Decode(&dst.OffsetRecordSent)
	if err == nil {
		jsonOffsetRecordSent, _ := json.Marshal(dst.OffsetRecordSent)
		if string(jsonOffsetRecordSent) == "{}" { // empty struct
			dst.OffsetRecordSent = nil
		} else {
			if err = validator.Validate(dst.OffsetRecordSent); err != nil {
				dst.OffsetRecordSent = nil
			} else {
				match++
			}
		}
	} else {
		dst.OffsetRecordSent = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Error = nil
		dst.OffsetRecordSent = nil

		return fmt.Errorf("data matches more than one schema in oneOf(OffsetRecordSentListOffsetsInner)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(OffsetRecordSentListOffsetsInner)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src OffsetRecordSentListOffsetsInner) MarshalJSON() ([]byte, error) {
	if src.Error != nil {
		return json.Marshal(&src.Error)
	}

	if src.OffsetRecordSent != nil {
		return json.Marshal(&src.OffsetRecordSent)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *OffsetRecordSentListOffsetsInner) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.Error != nil {
		return obj.Error
	}

	if obj.OffsetRecordSent != nil {
		return obj.OffsetRecordSent
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj OffsetRecordSentListOffsetsInner) GetActualInstanceValue() (interface{}) {
	if obj.Error != nil {
		return *obj.Error
	}

	if obj.OffsetRecordSent != nil {
		return *obj.OffsetRecordSent
	}

	// all schemas are nil
	return nil
}

type NullableOffsetRecordSentListOffsetsInner struct {
	value *OffsetRecordSentListOffsetsInner
	isSet bool
}

func (v NullableOffsetRecordSentListOffsetsInner) Get() *OffsetRecordSentListOffsetsInner {
	return v.value
}

func (v *NullableOffsetRecordSentListOffsetsInner) Set(val *OffsetRecordSentListOffsetsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableOffsetRecordSentListOffsetsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableOffsetRecordSentListOffsetsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOffsetRecordSentListOffsetsInner(val *OffsetRecordSentListOffsetsInner) *NullableOffsetRecordSentListOffsetsInner {
	return &NullableOffsetRecordSentListOffsetsInner{value: val, isSet: true}
}

func (v NullableOffsetRecordSentListOffsetsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOffsetRecordSentListOffsetsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


