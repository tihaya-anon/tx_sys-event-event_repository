/*
Kafka Bridge API Reference

The Kafka Bridge provides a REST API for integrating HTTP based client applications with a Kafka cluster. You can use the API to create and manage consumers and send and receive records over HTTP rather than the native Kafka protocol. 

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kafka_bridge

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ProducerRecordToPartition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProducerRecordToPartition{}

// ProducerRecordToPartition struct for ProducerRecordToPartition
type ProducerRecordToPartition struct {
	Value NullableRecordValue `json:"value"`
	Key *RecordKey `json:"key,omitempty"`
	Headers []KafkaHeader `json:"headers,omitempty"`
}

type _ProducerRecordToPartition ProducerRecordToPartition

// NewProducerRecordToPartition instantiates a new ProducerRecordToPartition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProducerRecordToPartition(value NullableRecordValue) *ProducerRecordToPartition {
	this := ProducerRecordToPartition{}
	this.Value = value
	return &this
}

// NewProducerRecordToPartitionWithDefaults instantiates a new ProducerRecordToPartition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProducerRecordToPartitionWithDefaults() *ProducerRecordToPartition {
	this := ProducerRecordToPartition{}
	return &this
}

// GetValue returns the Value field value
// If the value is explicit nil, the zero value for RecordValue will be returned
func (o *ProducerRecordToPartition) GetValue() RecordValue {
	if o == nil || o.Value.Get() == nil {
		var ret RecordValue
		return ret
	}

	return *o.Value.Get()
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProducerRecordToPartition) GetValueOk() (*RecordValue, bool) {
	if o == nil {
		return nil, false
	}
	return o.Value.Get(), o.Value.IsSet()
}

// SetValue sets field value
func (o *ProducerRecordToPartition) SetValue(v RecordValue) {
	o.Value.Set(&v)
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *ProducerRecordToPartition) GetKey() RecordKey {
	if o == nil || IsNil(o.Key) {
		var ret RecordKey
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProducerRecordToPartition) GetKeyOk() (*RecordKey, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *ProducerRecordToPartition) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given RecordKey and assigns it to the Key field.
func (o *ProducerRecordToPartition) SetKey(v RecordKey) {
	o.Key = &v
}

// GetHeaders returns the Headers field value if set, zero value otherwise.
func (o *ProducerRecordToPartition) GetHeaders() []KafkaHeader {
	if o == nil || IsNil(o.Headers) {
		var ret []KafkaHeader
		return ret
	}
	return o.Headers
}

// GetHeadersOk returns a tuple with the Headers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProducerRecordToPartition) GetHeadersOk() ([]KafkaHeader, bool) {
	if o == nil || IsNil(o.Headers) {
		return nil, false
	}
	return o.Headers, true
}

// HasHeaders returns a boolean if a field has been set.
func (o *ProducerRecordToPartition) HasHeaders() bool {
	if o != nil && !IsNil(o.Headers) {
		return true
	}

	return false
}

// SetHeaders gets a reference to the given []KafkaHeader and assigns it to the Headers field.
func (o *ProducerRecordToPartition) SetHeaders(v []KafkaHeader) {
	o.Headers = v
}

func (o ProducerRecordToPartition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProducerRecordToPartition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["value"] = o.Value.Get()
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	if !IsNil(o.Headers) {
		toSerialize["headers"] = o.Headers
	}
	return toSerialize, nil
}

func (o *ProducerRecordToPartition) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"value",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProducerRecordToPartition := _ProducerRecordToPartition{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varProducerRecordToPartition)

	if err != nil {
		return err
	}

	*o = ProducerRecordToPartition(varProducerRecordToPartition)

	return err
}

type NullableProducerRecordToPartition struct {
	value *ProducerRecordToPartition
	isSet bool
}

func (v NullableProducerRecordToPartition) Get() *ProducerRecordToPartition {
	return v.value
}

func (v *NullableProducerRecordToPartition) Set(val *ProducerRecordToPartition) {
	v.value = val
	v.isSet = true
}

func (v NullableProducerRecordToPartition) IsSet() bool {
	return v.isSet
}

func (v *NullableProducerRecordToPartition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProducerRecordToPartition(val *ProducerRecordToPartition) *NullableProducerRecordToPartition {
	return &NullableProducerRecordToPartition{value: val, isSet: true}
}

func (v NullableProducerRecordToPartition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProducerRecordToPartition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


