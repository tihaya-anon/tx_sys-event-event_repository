/*
Kafka Bridge API Reference

The Kafka Bridge provides a REST API for integrating HTTP based client applications with a Kafka cluster. You can use the API to create and manage consumers and send and receive records over HTTP rather than the native Kafka protocol. 

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kafka_bridge

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the NewTopic type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NewTopic{}

// NewTopic struct for NewTopic
type NewTopic struct {
	// Name of the topic to create.
	TopicName string `json:"topic_name"`
	// Number of partitions for the topic.
	PartitionsCount NullableInt32 `json:"partitions_count,omitempty"`
	// Number of replicas for each partition.
	ReplicationFactor NullableInt32 `json:"replication_factor,omitempty"`
}

type _NewTopic NewTopic

// NewNewTopic instantiates a new NewTopic object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNewTopic(topicName string) *NewTopic {
	this := NewTopic{}
	this.TopicName = topicName
	return &this
}

// NewNewTopicWithDefaults instantiates a new NewTopic object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNewTopicWithDefaults() *NewTopic {
	this := NewTopic{}
	return &this
}

// GetTopicName returns the TopicName field value
func (o *NewTopic) GetTopicName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TopicName
}

// GetTopicNameOk returns a tuple with the TopicName field value
// and a boolean to check if the value has been set.
func (o *NewTopic) GetTopicNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TopicName, true
}

// SetTopicName sets field value
func (o *NewTopic) SetTopicName(v string) {
	o.TopicName = v
}

// GetPartitionsCount returns the PartitionsCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NewTopic) GetPartitionsCount() int32 {
	if o == nil || IsNil(o.PartitionsCount.Get()) {
		var ret int32
		return ret
	}
	return *o.PartitionsCount.Get()
}

// GetPartitionsCountOk returns a tuple with the PartitionsCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NewTopic) GetPartitionsCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.PartitionsCount.Get(), o.PartitionsCount.IsSet()
}

// HasPartitionsCount returns a boolean if a field has been set.
func (o *NewTopic) HasPartitionsCount() bool {
	if o != nil && o.PartitionsCount.IsSet() {
		return true
	}

	return false
}

// SetPartitionsCount gets a reference to the given NullableInt32 and assigns it to the PartitionsCount field.
func (o *NewTopic) SetPartitionsCount(v int32) {
	o.PartitionsCount.Set(&v)
}
// SetPartitionsCountNil sets the value for PartitionsCount to be an explicit nil
func (o *NewTopic) SetPartitionsCountNil() {
	o.PartitionsCount.Set(nil)
}

// UnsetPartitionsCount ensures that no value is present for PartitionsCount, not even an explicit nil
func (o *NewTopic) UnsetPartitionsCount() {
	o.PartitionsCount.Unset()
}

// GetReplicationFactor returns the ReplicationFactor field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NewTopic) GetReplicationFactor() int32 {
	if o == nil || IsNil(o.ReplicationFactor.Get()) {
		var ret int32
		return ret
	}
	return *o.ReplicationFactor.Get()
}

// GetReplicationFactorOk returns a tuple with the ReplicationFactor field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NewTopic) GetReplicationFactorOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ReplicationFactor.Get(), o.ReplicationFactor.IsSet()
}

// HasReplicationFactor returns a boolean if a field has been set.
func (o *NewTopic) HasReplicationFactor() bool {
	if o != nil && o.ReplicationFactor.IsSet() {
		return true
	}

	return false
}

// SetReplicationFactor gets a reference to the given NullableInt32 and assigns it to the ReplicationFactor field.
func (o *NewTopic) SetReplicationFactor(v int32) {
	o.ReplicationFactor.Set(&v)
}
// SetReplicationFactorNil sets the value for ReplicationFactor to be an explicit nil
func (o *NewTopic) SetReplicationFactorNil() {
	o.ReplicationFactor.Set(nil)
}

// UnsetReplicationFactor ensures that no value is present for ReplicationFactor, not even an explicit nil
func (o *NewTopic) UnsetReplicationFactor() {
	o.ReplicationFactor.Unset()
}

func (o NewTopic) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NewTopic) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["topic_name"] = o.TopicName
	if o.PartitionsCount.IsSet() {
		toSerialize["partitions_count"] = o.PartitionsCount.Get()
	}
	if o.ReplicationFactor.IsSet() {
		toSerialize["replication_factor"] = o.ReplicationFactor.Get()
	}
	return toSerialize, nil
}

func (o *NewTopic) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"topic_name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNewTopic := _NewTopic{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNewTopic)

	if err != nil {
		return err
	}

	*o = NewTopic(varNewTopic)

	return err
}

type NullableNewTopic struct {
	value *NewTopic
	isSet bool
}

func (v NullableNewTopic) Get() *NewTopic {
	return v.value
}

func (v *NullableNewTopic) Set(val *NewTopic) {
	v.value = val
	v.isSet = true
}

func (v NullableNewTopic) IsSet() bool {
	return v.isSet
}

func (v *NullableNewTopic) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNewTopic(val *NewTopic) *NullableNewTopic {
	return &NullableNewTopic{value: val, isSet: true}
}

func (v NullableNewTopic) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNewTopic) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


