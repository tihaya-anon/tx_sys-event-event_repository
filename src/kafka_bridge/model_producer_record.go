/*
Kafka Bridge API Reference

The Kafka Bridge provides a REST API for integrating HTTP based client applications with a Kafka cluster. You can use the API to create and manage consumers and send and receive records over HTTP rather than the native Kafka protocol. 

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kafka_bridge

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ProducerRecord type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProducerRecord{}

// ProducerRecord struct for ProducerRecord
type ProducerRecord struct {
	Partition *int32 `json:"partition,omitempty"`
	Timestamp *int64 `json:"timestamp,omitempty"`
	Value NullableRecordValue `json:"value"`
	Key *RecordKey `json:"key,omitempty"`
	Headers []KafkaHeader `json:"headers,omitempty"`
}

type _ProducerRecord ProducerRecord

// NewProducerRecord instantiates a new ProducerRecord object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProducerRecord(value NullableRecordValue) *ProducerRecord {
	this := ProducerRecord{}
	this.Value = value
	return &this
}

// NewProducerRecordWithDefaults instantiates a new ProducerRecord object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProducerRecordWithDefaults() *ProducerRecord {
	this := ProducerRecord{}
	return &this
}

// GetPartition returns the Partition field value if set, zero value otherwise.
func (o *ProducerRecord) GetPartition() int32 {
	if o == nil || IsNil(o.Partition) {
		var ret int32
		return ret
	}
	return *o.Partition
}

// GetPartitionOk returns a tuple with the Partition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProducerRecord) GetPartitionOk() (*int32, bool) {
	if o == nil || IsNil(o.Partition) {
		return nil, false
	}
	return o.Partition, true
}

// HasPartition returns a boolean if a field has been set.
func (o *ProducerRecord) HasPartition() bool {
	if o != nil && !IsNil(o.Partition) {
		return true
	}

	return false
}

// SetPartition gets a reference to the given int32 and assigns it to the Partition field.
func (o *ProducerRecord) SetPartition(v int32) {
	o.Partition = &v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *ProducerRecord) GetTimestamp() int64 {
	if o == nil || IsNil(o.Timestamp) {
		var ret int64
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProducerRecord) GetTimestampOk() (*int64, bool) {
	if o == nil || IsNil(o.Timestamp) {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *ProducerRecord) HasTimestamp() bool {
	if o != nil && !IsNil(o.Timestamp) {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given int64 and assigns it to the Timestamp field.
func (o *ProducerRecord) SetTimestamp(v int64) {
	o.Timestamp = &v
}

// GetValue returns the Value field value
// If the value is explicit nil, the zero value for RecordValue will be returned
func (o *ProducerRecord) GetValue() RecordValue {
	if o == nil || o.Value.Get() == nil {
		var ret RecordValue
		return ret
	}

	return *o.Value.Get()
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProducerRecord) GetValueOk() (*RecordValue, bool) {
	if o == nil {
		return nil, false
	}
	return o.Value.Get(), o.Value.IsSet()
}

// SetValue sets field value
func (o *ProducerRecord) SetValue(v RecordValue) {
	o.Value.Set(&v)
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *ProducerRecord) GetKey() RecordKey {
	if o == nil || IsNil(o.Key) {
		var ret RecordKey
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProducerRecord) GetKeyOk() (*RecordKey, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *ProducerRecord) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given RecordKey and assigns it to the Key field.
func (o *ProducerRecord) SetKey(v RecordKey) {
	o.Key = &v
}

// GetHeaders returns the Headers field value if set, zero value otherwise.
func (o *ProducerRecord) GetHeaders() []KafkaHeader {
	if o == nil || IsNil(o.Headers) {
		var ret []KafkaHeader
		return ret
	}
	return o.Headers
}

// GetHeadersOk returns a tuple with the Headers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProducerRecord) GetHeadersOk() ([]KafkaHeader, bool) {
	if o == nil || IsNil(o.Headers) {
		return nil, false
	}
	return o.Headers, true
}

// HasHeaders returns a boolean if a field has been set.
func (o *ProducerRecord) HasHeaders() bool {
	if o != nil && !IsNil(o.Headers) {
		return true
	}

	return false
}

// SetHeaders gets a reference to the given []KafkaHeader and assigns it to the Headers field.
func (o *ProducerRecord) SetHeaders(v []KafkaHeader) {
	o.Headers = v
}

func (o ProducerRecord) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProducerRecord) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Partition) {
		toSerialize["partition"] = o.Partition
	}
	if !IsNil(o.Timestamp) {
		toSerialize["timestamp"] = o.Timestamp
	}
	toSerialize["value"] = o.Value.Get()
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	if !IsNil(o.Headers) {
		toSerialize["headers"] = o.Headers
	}
	return toSerialize, nil
}

func (o *ProducerRecord) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"value",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProducerRecord := _ProducerRecord{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varProducerRecord)

	if err != nil {
		return err
	}

	*o = ProducerRecord(varProducerRecord)

	return err
}

type NullableProducerRecord struct {
	value *ProducerRecord
	isSet bool
}

func (v NullableProducerRecord) Get() *ProducerRecord {
	return v.value
}

func (v *NullableProducerRecord) Set(val *ProducerRecord) {
	v.value = val
	v.isSet = true
}

func (v NullableProducerRecord) IsSet() bool {
	return v.isSet
}

func (v *NullableProducerRecord) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProducerRecord(val *ProducerRecord) *NullableProducerRecord {
	return &NullableProducerRecord{value: val, isSet: true}
}

func (v NullableProducerRecord) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProducerRecord) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


